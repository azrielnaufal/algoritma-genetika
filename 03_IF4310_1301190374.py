# -*- coding: utf-8 -*-
"""tugas1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1M1-jrPbRkND-1H5zaEENERWXRCAtR3U5
"""

import random
import math
from random import choices
from random import randint
from random import random
from random import seed
from random import uniform
from math import cos
from math import sin
import matplotlib.pyplot as plt

maks_populasi = 150
rate_mutasi = 0.01
rate_crossover = 0.7
batasX = [-1, 2]
batasY = [-1, 1]
panjang_gen = 10
max_loop = 1000
populasi = {}

def generate_gen(length):
  seed()
  return choices([0,1], k = length)

def biner_encoding(gen, min,max):
    pyb = 0
    lef = 0
    for i in range(1,len(gen)+1):
        pyb = pyb + 2**(-1*i)
        lef = lef + gen[i-1]*2**(-1*i)
    xy = min + (max - min)*(lef)/pyb
    return xy

def fitness_function(genX,genY):
    a = cos(genX**2)*sin(genY**2)+(genX+genY)
    return a

def generate_kromosom(lengthGen):
  x = generate_gen(lengthGen)
  y = generate_gen(lengthGen)
  c = x + y
  d = fitness_function(biner_encoding(x,batasX[0],batasX[1]),biner_encoding(y,batasY[0],batasY[1]))# -1 <= x <= 2 and -1 <= y <= 1
  e = 0 
  kromosom = {
      'genX' : x ,
      'fenX' : biner_encoding(x, batasX[0], batasX[1]),
      'genY' : y ,
      'fenY' : biner_encoding(y, batasY[0], batasY[1]),
      'krom' : c ,
      'fitVal' : d,
      'prob' : e
  }
  return kromosom

def generate_populasi(maxPop,lenGen):
    Lkrom = []
    for _ in range(maxPop):
        a = generate_kromosom(lenGen)
        Lkrom.append(a)

    populasi = {
        'kumpulan_kromosom' : Lkrom ,
        'bestKromosom' : {}
    }
    return populasi

def evaluateFitness(populasi):
    sem = 0
    idx = 0
    for i in populasi["kumpulan_kromosom"]:
        if sem < i["fitVal"]:
            sem = i["fitVal"]
            indeks = idx
        idx+=1

    bestkrom = populasi["kumpulan_kromosom"][indeks]
    return bestkrom

def normalization_fitness(pop):
  fit = []
  fit_total = 0
  probability = []
  for i in pop['kumpulan_kromosom']:
    fit.append(i['fitVal']+10)
    fit_total = fit_total + (i['fitVal']+10)
  
  for j in range(len(fit)):
    probability.append(fit[j]/fit_total)
  
  return probability

def parents(pop):
  seed()
  r = uniform(0, 1)
  index = 0
  while r > 0 and index < maks_populasi:
    r -= pop["kumpulan_kromosom"][index]["prob"]
    index+=1
  index-=1
  return pop["kumpulan_kromosom"][index], index

def crossover (laki, perempuan):
  singlepoint = randint(1, 2*panjang_gen-1)
  anak1 = []
  anak2 = []
  anak1 = perempuan["krom"][:singlepoint] + laki["krom"][singlepoint:]
  anak2 = laki["krom"][:singlepoint] + perempuan["krom"][singlepoint:]
  return anak1, anak2

def mutasi (krom):
  hasil = krom
  for i in range(2*panjang_gen):
    if uniform(0,1) < rate_mutasi:
      if hasil[i] == 0:  hasil[i] = 1
      else:  hasil[i] = 0
  return hasil

def create_kromosom(genX, genY):
  x = genX
  y = genY
  c = x + y
  d = fitness_function(biner_encoding(x,batasX[0],batasX[1]),biner_encoding(y,batasY[0],batasY[1]))# -1 <= x <= 2 and -1 <= y <= 1
  e = 0 
  kromosom = {
      'genX' : x ,
      'fenX' : biner_encoding(x, batasX[0], batasX[1]),
      'genY' : y ,
      'fenY' : biner_encoding(y, batasY[0], batasY[1]),
      'krom' : c ,
      'fitVal' : d,
      'prob' : e
  }
  return kromosom

def survivorSelection(maks_populasi, bestKromosom, populasi):
  i = 0
  minimum = 0
  minIdx = 0
  
  while i < maks_populasi:
    suami, index = parents(populasi)
    temp = populasi["kumpulan_kromosom"][index]["prob"]
    populasi["kumpulan_kromosom"][index]["prob"] = 0
    istri, _ = parents(populasi)
    populasi["kumpulan_kromosom"][index]["prob"] = temp
    if uniform(0, 1) < rate_crossover:
      krAnak1, krAnak2 = crossover(suami, istri)
      krAnak1 = mutasi(krAnak1)
      krAnak2 = mutasi(krAnak2)
      anak1 = create_kromosom(krAnak1[:panjang_gen], krAnak1[panjang_gen:])
      anak2 = create_kromosom(krAnak2[:panjang_gen], krAnak2[panjang_gen:])
      populasi["kumpulan_kromosom"][i] = anak1
      populasi["kumpulan_kromosom"][i+1] = anak2
    if populasi["kumpulan_kromosom"][i]["fitVal"] < minimum:
      minimum = populasi["kumpulan_kromosom"][i]["fitVal"]
      minIdx = i
    if populasi["kumpulan_kromosom"][i+1]["fitVal"] < minimum:
      minimum = populasi["kumpulan_kromosom"][i+1]["fitVal"]
      minIdx = i+1
    i+=2
  populasi["kumpulan_kromosom"][minIdx] = bestKromosom
  return populasi

def clearscreen():
  print(chr(27)+'[2j')
  print('\033c')
  print('\x1bc')

def graf(x, y):
  ax.clear()
  ax.plot(x, y)
  plt.show()

stop = 0
generation = 0
x = []
y = []
populasi = generate_populasi(maks_populasi, panjang_gen)
populasi["bestKromosom"] = evaluateFitness(populasi)
prob = normalization_fitness(populasi)
fig = plt.figure()
ax = fig.add_subplot(1,1,1)
for i in range(len(populasi["kumpulan_kromosom"])):
  populasi["kumpulan_kromosom"][i]["prob"] = prob[i]
populasi["bestKromosom"] = evaluateFitness(populasi)
bestKromosom = populasi["bestKromosom"]
while stop < max_loop:
  #uncomment baris kode di bawah jika ingin mengaktifkan auto clear screen
  #clearscreen()
  #Jika setelah diuncomment terjadi error, harap ubah ke comment lagi baris kode di atas
  print("Individu terbaik di Generasi ke - ", generation)
  print("Gnome : ", populasi["bestKromosom"]["krom"])
  print("Nilai x : ", populasi["bestKromosom"]["fenX"])
  print("Nilai y : ", populasi["bestKromosom"]["fenY"])
  print("Nilai fitness terbaik :", populasi["bestKromosom"]["fitVal"])
  x.append(generation)
  y.append(populasi["bestKromosom"]["fitVal"])
  populasi = survivorSelection(maks_populasi, bestKromosom, populasi)
  prob = normalization_fitness(populasi)
  for i in range(len(populasi["kumpulan_kromosom"])):
    populasi["kumpulan_kromosom"][i]["prob"] = prob[i]
  populasi["bestKromosom"] = evaluateFitness(populasi)
  if populasi["bestKromosom"]["fitVal"] == bestKromosom["fitVal"]:
    stop+=1
  else:
    stop = 0 
  bestKromosom = populasi["bestKromosom"]
  generation += 1
graf(x, y)